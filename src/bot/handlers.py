import os

from telegram import Update
from telegram.constants import ChatAction, ParseMode
from telegram.ext import ContextTypes

from src.bot.keyboards import result_keyboard, start_keyboard
from src.bot.states import *
from src.core.config import logger
from src.core.generator import generate_resume
from src.core.pdf_generator import generate_pdf


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %s –Ω–∞—Ç–∏—Å–Ω—É–≤ /start", update.effective_user.id)

    message = update.message or update.callback_query.message
    user_firstname = update.effective_user.first_name or "üë§"
    resume_exists = context.user_data.get("resume") is not None

    if resume_exists:
        text = (
            f"üëã –ü—Ä–∏–≤—ñ—Ç –∑–Ω–æ–≤—É, {user_firstname}!\n\n"
            "üìÑ –¢–∏ –≤–∂–µ —Å—Ç–≤–æ—Ä–∏–≤ —Ä–µ–∑—é–º–µ. –û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ:"
        )

        await message.reply_text(
            text,
            reply_markup=result_keyboard()  # —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏: —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ / PDF / –Ω–æ–≤–µ —Ä–µ–∑—é–º–µ
        )
        return end()

    else:
        text = (
            f"üëã –ü—Ä–∏–≤—ñ—Ç, {user_firstname}!\n\n"
            "–Ø ‚Äî –±–æ—Ç, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–µ —Ä–µ–∑—é–º–µ ‚ú®\n\n"
            "–í–∏–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ:"
        )

        await message.reply_text(
            text,
            reply_markup=start_keyboard(resume_exists=False)  # reply-–∫–Ω–æ–ø–∫–∏: —Å—Ç–≤–æ—Ä–∏—Ç–∏ / —ñ–Ω—Ñ–æ
        )
        return end()

async def start_resume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    first_state = STATE_ORDER[0]
    context.user_data["state"] = first_state
    first_question = QUESTION_FLOW[first_state][1]

    await update.message.reply_text(f"üîé {first_question}")
    return first_state

async def new_resume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    first_state = STATE_ORDER[0]
    context.user_data["state"] = first_state
    first_question = QUESTION_FLOW[first_state][1]
    message = update.message or update.callback_query.message
    await message.reply_text(f"üîé {first_question}")
    return first_state

async def send_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    text = context.user_data.get("resume")
    if not text:
        await query.edit_message_text("‚ùå –†–µ–∑—é–º–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É.")
        return

    pdf_path = generate_pdf(text)
    with open(pdf_path, "rb") as f:
        await context.bot.send_document(chat_id=update.effective_chat.id, document=f, filename="resume.pdf")

    try:
        os.remove(pdf_path)
    except Exception:
        pass




async def edit_markdown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("üîÑ edit_markdown –∑–∞–ø—É—â–µ–Ω–æ")

    query = update.callback_query
    await query.answer()

    current_text = context.user_data.get("resume")
    logger.warning(f"–ó–±–µ—Ä–µ–∂–µ–Ω–µ —Ä–µ–∑—é–º–µ (Markdown): {current_text!r}")

    if not current_text:
        logger.warning("‚ùå –ù–µ–º–∞—î —Ç–µ–∫—Å—Ç—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è")
        await query.edit_message_text("‚ùå –ù–µ–º–∞—î —Ç–µ–∫—Å—Ç—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.")
        return end()

    logger.info("üì§ –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è Markdown")
    await query.message.reply_text("üìù –ù–∞–¥—ñ—à–ª–∏ –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–∏–π Markdown-—Ç–µ–∫—Å—Ç –Ω–∏–∂—á–µ:")

    logger.info("üì§ –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π Markdown —É —Ñ–æ—Ä–º–∞—Ç—ñ ```")
    await query.message.reply_text(
        f"```markdown\n{current_text}```",
        parse_mode="Markdown"
    )

    logger.info("‚úÖ –ü–µ—Ä–µ—Ö—ñ–¥ —É —Å—Ç–∞–Ω EDITING")
    context.user_data["state"] = EDITING  # –≤–∞–∂–ª–∏–≤–æ!
    return EDITING


# –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ–≥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è Markdown
async def edited_markdown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"[DEBUG] –ü—Ä–∏–π–Ω—è—Ç–æ: {update.message}")
    context.user_data['resume'] = update.message.text

    await update.message.reply_text(
        "‚úÖ –¢–µ–∫—Å—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ. –¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ PDF.",
        reply_markup=result_keyboard()
    )

    return end()


async def regenerate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("üîÅ –ü–æ—á–Ω—ñ–º–æ –∑–Ω–æ–≤—É. –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?")
    return end() #NAME



async def handle_text(update, context):
    logger.info(f"[handle_text] state={context.user_data.get('state')}")
    user_input = update.message.text
    current_state = context.user_data.get("state", STATE_ORDER[0])
    key = STATE_MAP[current_state]

    context.user_data[key] = user_input

    try:
        next_state = STATE_ORDER[STATE_ORDER.index(current_state) + 1]
    except IndexError:
        await update.message.reply_text("‚úÖ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –ì–µ–Ω–µ—Ä—É—é —Ä–µ–∑—é–º–µ...")
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)

        resume = await generate_resume(context.user_data)
        context.user_data['resume'] = resume
        logger.warning(f"FROM Chat {resume}")
        formatted = (
            f"üìÑ *–¢–≤–æ—î –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–µ —Ä–µ–∑—é–º–µ:*\n\n"
            f"*–Ü–º º—è:* {context.user_data.get('name')}\n"
            f"*–ü–æ—Å–∞–¥–∞:* {context.user_data.get('position')}\n"
            f"*–û—Å–≤—ñ—Ç–∞:* {context.user_data.get('education')}\n"
            f"*–ù–∞–≤–∏—á–∫–∏:* {context.user_data.get('skills')}\n"
            f"*Soft-—Å–∫—ñ–ª–∏:* {context.user_data.get('soft_skills')}\n"
            f"*–ü—Ä–æ —Å–µ–±–µ:* {context.user_data.get('about')}"
        )

        await update.message.reply_text(
            # "‚úÖ –†–µ–∑—é–º–µ –≥–æ—Ç–æ–≤–µ!\n\n–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëá",
            formatted,
            parse_mode="Markdown",
            reply_markup=result_keyboard()
        )



        return end()

    context.user_data["state"] = next_state
    next_question = QUESTION_FLOW[next_state][1]
    await update.message.reply_text(next_question)
    return next_state